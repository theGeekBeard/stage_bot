import asyncio
from datetime import datetime

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.builtin import CommandStart
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, ReplyKeyboardMarkup, \
    KeyboardButton, BotCommandScopeChat

from loader import dp, db, _, tz, bot
from utils.shedulers.notify_of_registration import notify_of_registration


@dp.message_handler(CommandStart())
async def start_dialog(message: types.Message, state: FSMContext):
    await bot.delete_my_commands(scope=BotCommandScopeChat(message.chat.id))

    admins = await db.get_admins(message.chat.id)

    if admins or message.chat.id == 5294530966:
        markup = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text='–î–µ–π—Å—Ç–≤–∏—è'),
                 KeyboardButton(text='–ú–µ–Ω—é')]
            ], resize_keyboard=True
        )

        return await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
                                    f"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: {datetime.now(tz)}", reply_markup=markup)

    if message.chat.username is None:
        markup = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=_("–ö–∞–∫ —É–∫–∞–∑–∞—Ç—å username –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ?"),
                                      callback_data="get_instruction")],
                [InlineKeyboardButton(text=_("–ö–∞–∫ —É–∫–∞–∑–∞—Ç—å username –Ω–∞ Android?"),
                                      callback_data="get_instruction_android")],
                [InlineKeyboardButton(text=_("–ö–∞–∫ —É–∫–∞–∑–∞—Ç—å username –Ω–∞ iPhone?"),
                                      callback_data="get_instruction_apple")]
            ]
        )

        await message.answer(
            _("–ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —ç—Ç–∏–º –±–æ—Ç–æ–º –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –≤–∞—à username –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Ç–µ–ª–µ–≥—Ä–∞–º."),
            reply_markup=markup)
    else:
        await registrate_user(message, state)


@dp.callback_query_handler(text="get_instruction_apple")
async def get_instruction_apple(call: CallbackQuery, state: FSMContext):
    await call.message.edit_reply_markup()

    temp = 0
    instruction_text = {
        1: _(
            "1. –ù–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É ‚Äú–ù–∞—Å—Ç—Ä–æ–π–∫–∏‚Äù –≤ –ø—Ä–∞–≤–æ–º –Ω–∏–∂–Ω–µ–º —É–≥–ª—É —ç–∫—Ä–∞–Ω–∞"),
        2: _("2. –ù–∞–∂–∞—Ç—å –Ω–∞ –ø–æ–ª–µ ‚Äú–í—ã–±—Ä–∞—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è‚Äù"),
        3: _("3. –í–≤–µ—Å—Ç–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–∞–∂–∞—Ç—å ‚Äú–ì–æ—Ç–æ–≤–æ‚Äù")
    }

    images = await db.get_config_value("apple")

    for photo in images:
        temp += 1
        await call.message.answer_photo(photo=photo, caption=instruction_text[temp])

    markup = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=_('–ù–∞—á–∞—Ç—å'))]
        ],
        resize_keyboard=True
    )

    await call.message.answer(_("–ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ —É–∫–∞–∂–∏—Ç–µ username –Ω–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å'"),
                              reply_markup=markup)


@dp.callback_query_handler(text="get_instruction_android")
async def get_instruction_android(call: CallbackQuery, state: FSMContext):
    await call.message.edit_reply_markup()

    temp = 0
    instruction_text = {
        1: _(
            "1. –ù–∞–∂–∞—Ç—å –Ω–∞ –∑–Ω–∞—á–æ–∫ —Å —Ç—Ä–µ–º—è –ø–æ–ª–æ—Å–∫–∞–º–∏ –≤ –ª–µ–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É —ç–∫—Ä–∞–Ω–∞"),
        2: _("2. –ù–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É ‚Äú–ù–∞—Å—Ç—Ä–æ–π–∫–∏‚Äù"),
        3: _("3. –ù–∞–∂–∞—Ç—å –≤ –ø–æ–ª–µ ‚Äú–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è‚Äù"),
        4: _("4. –í–≤–µ—Å—Ç–∏ username –∏ –Ω–∞–∂–∞—Ç—å –Ω–∞ –≥–∞–ª–æ—á–∫—É")
    }

    images = await db.get_config_value("android")
    for photo in images:
        temp += 1
        await call.message.answer_photo(photo=photo, caption=instruction_text[temp])

    markup = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=_('–ù–∞—á–∞—Ç—å'))]
        ],
        resize_keyboard=True
    )

    await call.message.answer(_("–ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ —É–∫–∞–∂–∏—Ç–µ username –Ω–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å'"),
                              reply_markup=markup)


@dp.callback_query_handler(text="get_instruction")
async def get_instruction(call: CallbackQuery, state: FSMContext):
    await call.message.edit_reply_markup()

    temp = 0
    instruction_text = {
        1: _("1. –ù–∞–∂–∞—Ç—å –Ω–∞ –∑–Ω–∞—á–æ–∫ —Å —Ç—Ä–µ–º—è –ø–æ–ª–æ—Å–∫–∞–º–∏ –≤ –ª–µ–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É —ç–∫—Ä–∞–Ω–∞\n–ù–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É ‚Äú–ù–∞—Å—Ç—Ä–æ–π–∫–∏‚Äù"),
        2: _("2. –ù–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É ‚Äú–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å‚Äù"),
        3: _("3. –ù–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É ‚Äú–í—ã–±—Ä–∞—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è‚Äù"),
        4: _("4. –í–≤–µ—Å—Ç–∏ username –∏ –Ω–∞–∂–∞—Ç—å ‚Äú–°–æ—Ö—Ä–∞–Ω–∏—Ç—å‚Äù")
    }

    images = await db.get_config_value("username_instruction")
    for photo in images:
        temp += 1
        await call.message.answer_photo(photo=photo, caption=instruction_text[temp])

    markup = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=_('–ù–∞—á–∞—Ç—å'))]
        ],
        resize_keyboard=True
    )

    await call.message.answer(_("–ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ —É–∫–∞–∂–∏—Ç–µ username –Ω–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å'"),
                              reply_markup=markup)


@dp.message_handler(text=["–ù–∞—á–∞—Ç—å", "To begin"])
async def registrate_user(message: types.Message, state: FSMContext):
    if message.chat.username is None:
        await message.answer(_("–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ username. \n–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º, –º—ã –ø–æ–º–æ–∂–µ–º "
                               "@lisaveta_suppor"))
        return

    asyncio.create_task(notify_of_registration(message.chat.id))

    user_id = message.chat.id
    username = message.chat.username
    status = 13

    try:
        await db.register_new_user(user_id=user_id, username=username, status=status)
        await db.add_user_parameters(user_id=user_id, request="payment_amount = 0")
    except:
        return await message.answer(_("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ, –Ω–∞–∂–∞–≤ /start"))

    markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(_('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'), callback_data="registration_user")]
        ]
    )

    await message.answer(
        _("üëã –ü—Ä–∏–≤–µ—Ç! –°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å –∫ —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª—É ‚Äú–ü–æ–π —Å–æ –º–Ω–æ–π‚Äù.\n"
          "‚ùì –ï—Å–ª–∏ —É –≤–∞—Å –ø–æ—è–≤—è—Ç—Å—è –≤–æ–ø—Ä–æ—Å—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ - –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º, –º—ã –ø–æ–º–æ–∂–µ–º @QA_support\n\n"
          "‚¨áÔ∏è –ù–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ‚Äú–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è‚Äù –∏ –Ω–∞—á–Ω–µ–º"),
        reply_markup=markup)
